:py:mod:`whylogs.core.metrics.unicode_range`
============================================

.. py:module:: whylogs.core.metrics.unicode_range


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   whylogs.core.metrics.unicode_range.UnicodeRangeMetric




.. py:class:: UnicodeRangeMetric(submetrics: Dict[str, whylogs.core.metrics.Metric])

   Bases: :py:obj:`whylogs.core.metrics.compound_metric.CompoundMetric`

   For string values, maintains a DistributionMetric for the counts of
   characters that fall within user-defined codepoint ranges.

   Parameters
    ----------
    range_definitions : Dict[str, Tuple[int, int]]
        Defines the character ranges to be counted. The key servers as
        the range name and should only contain alphanumeric, hyphen, and
        underscore characters. The tuple defines the Unicode codepoint
        range to be tracked. The string length is tracked under the key
        "STRING_LENGTH" so don't use that as a range name.

   .. py:attribute:: range_definitions
      :annotation: :Dict[str, Tuple[int, int]]

      

   .. py:attribute:: lower_case
      :annotation: :bool = True

      

   .. py:attribute:: normalize
      :annotation: :bool = True

      

   .. py:attribute:: submetrics
      :annotation: :Dict[str, whylogs.core.metrics.Metric]

      

   .. py:method:: namespace(self) -> str
      :property:


   .. py:method:: merge(self, other: UnicodeRangeMetric) -> UnicodeRangeMetric


   .. py:method:: columnar_update(self, view: whylogs.core.preprocessing.PreprocessedColumn) -> whylogs.core.metrics.metrics.OperationResult


   .. py:method:: zero(cls, config: whylogs.core.metrics.metrics.MetricConfig) -> UnicodeRangeMetric
      :classmethod:


   .. py:method:: from_protobuf(cls, msg: whylogs.core.proto.MetricMessage) -> UnicodeRangeMetric
      :classmethod:


   .. py:method:: merge_submetrics(self: COMPOUND_METRIC, other: COMPOUND_METRIC) -> Dict[str, whylogs.core.metrics.Metric]


   .. py:method:: to_protobuf(self) -> whylogs.core.proto.MetricMessage


   .. py:method:: get_component_paths(self) -> List[str]


   .. py:method:: to_summary_dict(self, cfg: whylogs.core.configs.SummaryConfig) -> Dict[str, Any]


   .. py:method:: submetrics_from_protobuf(cls: Type[COMPOUND_METRIC], msg: whylogs.core.proto.MetricMessage) -> Dict[str, whylogs.core.metrics.Metric]
      :classmethod:


   .. py:method:: get_namespace(cls, config: MetricConfig) -> str
      :classmethod:



