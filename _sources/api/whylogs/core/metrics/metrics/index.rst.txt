:py:mod:`whylogs.core.metrics.metrics`
======================================

.. py:module:: whylogs.core.metrics.metrics


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   whylogs.core.metrics.metrics.MetricConfig
   whylogs.core.metrics.metrics.OperationResult
   whylogs.core.metrics.metrics.Metric
   whylogs.core.metrics.metrics.IntsMetric
   whylogs.core.metrics.metrics.DistributionMetric
   whylogs.core.metrics.metrics.FrequentItem
   whylogs.core.metrics.metrics.FrequentItemsMetric
   whylogs.core.metrics.metrics.CardinalityMetric
   whylogs.core.metrics.metrics.CustomMetricBase



Functions
~~~~~~~~~

.. autoapisummary::

   whylogs.core.metrics.metrics.custom_metric



Attributes
~~~~~~~~~~

.. autoapisummary::

   whylogs.core.metrics.metrics.T
   whylogs.core.metrics.metrics.M
   whylogs.core.metrics.metrics.NUM
   whylogs.core.metrics.metrics.METRIC


.. py:data:: T
   

   

.. py:data:: M
   

   

.. py:data:: NUM
   

   

.. py:data:: METRIC
   

   

.. py:class:: MetricConfig

   .. py:attribute:: hll_lg_k
      :annotation: :int = 12

      

   .. py:attribute:: kll_k
      :annotation: :int = 256

      

   .. py:attribute:: fi_lg_max_k
      :annotation: :int = 10

      

   .. py:attribute:: fi_disabled
      :annotation: :bool = False

      

   .. py:attribute:: track_unicode_ranges
      :annotation: :bool = False

      

   .. py:attribute:: large_kll_k
      :annotation: :bool = True

      

   .. py:attribute:: kll_k_large
      :annotation: :int = 1024

      

   .. py:attribute:: unicode_ranges
      :annotation: :Dict[str, Tuple[int, int]]

      

   .. py:attribute:: lower_case
      :annotation: :bool = True

      

   .. py:attribute:: normalize
      :annotation: :bool = True

      


.. py:function:: custom_metric(metric: Type[METRIC], config: MetricConfig = MetricConfig()) -> Type[METRIC]


.. py:class:: OperationResult

   .. py:attribute:: failures
      :annotation: :int = 0

      

   .. py:attribute:: successes
      :annotation: :int = 0

      

   .. py:method:: ok(cnt: int = 1) -> OperationResult
      :classmethod:


   .. py:method:: failed(cnt: int = 1) -> OperationResult
      :classmethod:



.. py:class:: Metric

   Bases: :py:obj:`abc.ABC`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:property:: namespace
      :type: str
      :abstractmethod:


   .. py:method:: get_namespace(config: Optional[MetricConfig] = None) -> str
      :classmethod:


   .. py:method:: merge(other: METRIC) -> METRIC


   .. py:method:: to_protobuf() -> whylogs.core.proto.MetricMessage


   .. py:method:: get_component_paths() -> List[str]


   .. py:method:: to_summary_dict(cfg: Optional[whylogs.core.configs.SummaryConfig] = None) -> Dict[str, Any]
      :abstractmethod:


   .. py:method:: columnar_update(data: whylogs.core.preprocessing.PreprocessedColumn) -> OperationResult
      :abstractmethod:


   .. py:method:: zero(config: Optional[MetricConfig] = None) -> METRIC
      :classmethod:
      :abstractmethod:


   .. py:method:: from_protobuf(msg: whylogs.core.proto.MetricMessage) -> METRIC
      :classmethod:



.. py:class:: IntsMetric

   Bases: :py:obj:`Metric`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:property:: namespace
      :type: str


   .. py:property:: maximum
      :type: float


   .. py:property:: minimum
      :type: float


   .. py:attribute:: max
      :annotation: :whylogs.core.metrics.metric_components.MaxIntegralComponent

      

   .. py:attribute:: min
      :annotation: :whylogs.core.metrics.metric_components.MinIntegralComponent

      

   .. py:method:: columnar_update(data: whylogs.core.preprocessing.PreprocessedColumn) -> OperationResult


   .. py:method:: zero(config: Optional[MetricConfig] = None) -> IntsMetric
      :classmethod:


   .. py:method:: to_summary_dict(cfg: Optional[whylogs.core.configs.SummaryConfig] = None) -> Dict[str, Union[int, float, str, None]]


   .. py:method:: get_namespace(config: Optional[MetricConfig] = None) -> str
      :classmethod:


   .. py:method:: merge(other: METRIC) -> METRIC


   .. py:method:: to_protobuf() -> whylogs.core.proto.MetricMessage


   .. py:method:: get_component_paths() -> List[str]


   .. py:method:: from_protobuf(msg: whylogs.core.proto.MetricMessage) -> METRIC
      :classmethod:



.. py:class:: DistributionMetric

   Bases: :py:obj:`Metric`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:property:: namespace
      :type: str


   .. py:property:: n
      :type: float


   .. py:property:: variance
      :type: float

      Returns the population variance of the stream.

      https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Welford's_online_algorithm

   .. py:property:: stddev
      :type: float


   .. py:property:: avg
      :type: float


   .. py:property:: median
      :type: Optional[float]


   .. py:property:: q_01
      :type: Optional[float]


   .. py:property:: q_05
      :type: Optional[float]


   .. py:property:: q_10
      :type: Optional[float]


   .. py:property:: q_25
      :type: Optional[float]


   .. py:property:: q_75
      :type: Optional[float]


   .. py:property:: q_90
      :type: Optional[float]


   .. py:property:: q_95
      :type: Optional[float]


   .. py:property:: q_99
      :type: Optional[float]


   .. py:property:: max
      :type: float


   .. py:property:: min
      :type: float


   .. py:attribute:: kll
      :annotation: :whylogs.core.metrics.metric_components.KllComponent

      

   .. py:attribute:: mean
      :annotation: :whylogs.core.metrics.metric_components.FractionalComponent

      

   .. py:attribute:: m2
      :annotation: :whylogs.core.metrics.metric_components.FractionalComponent

      

   .. py:method:: to_summary_dict(cfg: Optional[whylogs.core.configs.SummaryConfig] = None) -> Dict[str, Union[int, float, str, None]]


   .. py:method:: columnar_update(view: whylogs.core.preprocessing.PreprocessedColumn) -> OperationResult

      Update the operation

      Algorithm: https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Parallel_algorithm

      :param view: the preprocessed column

      :returns: how many successful operations we had


   .. py:method:: merge(other: DistributionMetric) -> DistributionMetric


   .. py:method:: zero(config: Optional[MetricConfig] = None) -> DistributionMetric
      :classmethod:


   .. py:method:: get_namespace(config: Optional[MetricConfig] = None) -> str
      :classmethod:


   .. py:method:: to_protobuf() -> whylogs.core.proto.MetricMessage


   .. py:method:: get_component_paths() -> List[str]


   .. py:method:: from_protobuf(msg: whylogs.core.proto.MetricMessage) -> METRIC
      :classmethod:



.. py:class:: FrequentItem

   .. py:attribute:: value
      :annotation: :str

      

   .. py:attribute:: est
      :annotation: :int

      

   .. py:attribute:: upper
      :annotation: :int

      

   .. py:attribute:: lower
      :annotation: :int

      


.. py:class:: FrequentItemsMetric

   Bases: :py:obj:`Metric`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:property:: namespace
      :type: str


   .. py:property:: strings
      :type: List[FrequentItem]


   .. py:attribute:: frequent_strings
      :annotation: :whylogs.core.metrics.metric_components.FrequentStringsComponent

      

   .. py:method:: columnar_update(view: whylogs.core.preprocessing.PreprocessedColumn) -> OperationResult


   .. py:method:: to_summary_dict(cfg: Optional[whylogs.core.configs.SummaryConfig] = None) -> Dict[str, Any]


   .. py:method:: zero(config: Optional[MetricConfig] = None) -> FrequentItemsMetric
      :classmethod:


   .. py:method:: get_namespace(config: Optional[MetricConfig] = None) -> str
      :classmethod:


   .. py:method:: merge(other: METRIC) -> METRIC


   .. py:method:: to_protobuf() -> whylogs.core.proto.MetricMessage


   .. py:method:: get_component_paths() -> List[str]


   .. py:method:: from_protobuf(msg: whylogs.core.proto.MetricMessage) -> METRIC
      :classmethod:



.. py:class:: CardinalityMetric

   Bases: :py:obj:`Metric`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:property:: namespace
      :type: str


   .. py:property:: estimate
      :type: Optional[float]


   .. py:property:: upper_1
      :type: Optional[float]


   .. py:property:: lower_1
      :type: Optional[float]


   .. py:attribute:: hll
      :annotation: :whylogs.core.metrics.metric_components.HllComponent

      

   .. py:method:: columnar_update(view: whylogs.core.preprocessing.PreprocessedColumn) -> OperationResult


   .. py:method:: to_summary_dict(cfg: Optional[whylogs.core.configs.SummaryConfig] = None) -> Dict[str, Any]


   .. py:method:: zero(config: Optional[MetricConfig] = None) -> CardinalityMetric
      :classmethod:


   .. py:method:: get_namespace(config: Optional[MetricConfig] = None) -> str
      :classmethod:


   .. py:method:: merge(other: METRIC) -> METRIC


   .. py:method:: to_protobuf() -> whylogs.core.proto.MetricMessage


   .. py:method:: get_component_paths() -> List[str]


   .. py:method:: from_protobuf(msg: whylogs.core.proto.MetricMessage) -> METRIC
      :classmethod:



.. py:class:: CustomMetricBase

   Bases: :py:obj:`Metric`, :py:obj:`abc.ABC`

   You can use this as a base class for custom metrics that don't use
   the supplied or custom MetricComponents. Subclasses must be decorated with
   @dataclass. All fields not prefixed with an underscore will be included
   in the summary and will be [de]serialized. Such subclasses will need to
   implement the namespace, merge, and zero methods.

   .. py:property:: namespace
      :type: str
      :abstractmethod:


   .. py:method:: get_component_paths() -> List[str]


   .. py:method:: to_summary_dict(cfg: Optional[whylogs.core.configs.SummaryConfig] = None) -> Dict[str, Any]


   .. py:method:: to_protobuf() -> whylogs.core.proto.MetricMessage


   .. py:method:: from_protobuf(msg: whylogs.core.proto.MetricMessage) -> METRIC
      :classmethod:


   .. py:method:: get_namespace(config: Optional[MetricConfig] = None) -> str
      :classmethod:


   .. py:method:: merge(other: METRIC) -> METRIC


   .. py:method:: columnar_update(data: whylogs.core.preprocessing.PreprocessedColumn) -> OperationResult
      :abstractmethod:


   .. py:method:: zero(config: Optional[MetricConfig] = None) -> METRIC
      :classmethod:
      :abstractmethod:



