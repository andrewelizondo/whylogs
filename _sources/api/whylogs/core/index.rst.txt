:py:mod:`whylogs.core`
======================

.. py:module:: whylogs.core


Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   constraints/index.rst
   metrics/index.rst
   proto/index.rst
   view/index.rst


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   column_profile/index.rst
   common/index.rst
   configs/index.rst
   dataset_profile/index.rst
   datatypes/index.rst
   errors/index.rst
   preprocessing/index.rst
   projectors/index.rst
   resolvers/index.rst
   schema/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   whylogs.core.ColumnProfile
   whylogs.core.DatasetProfile
   whylogs.core.TypeMapper
   whylogs.core.MetricConfig
   whylogs.core.Resolver
   whylogs.core.ColumnSchema
   whylogs.core.DatasetSchema
   whylogs.core.ColumnProfileView
   whylogs.core.DatasetProfileView




Attributes
~~~~~~~~~~

.. autoapisummary::

   whylogs.core.WHYLOGS_MAGIC_HEADER


.. py:class:: ColumnProfile(name: str, schema: whylogs.core.schema.ColumnSchema, cache_size: int)

   Bases: :py:obj:`object`

   .. py:method:: add_metric(metric: whylogs.core.metrics.Metric) -> None


   .. py:method:: track(row: Dict[str, Any]) -> None


   .. py:method:: flush() -> None

      Force emptying the cache and update the internal metrics.


   .. py:method:: track_column(series: Any) -> None


   .. py:method:: to_protobuf() -> whylogs.core.proto.ColumnMessage


   .. py:method:: view() -> whylogs.core.view.ColumnProfileView



.. py:class:: DatasetProfile(schema: Optional[whylogs.core.schema.DatasetSchema] = None, dataset_timestamp: Optional[datetime.datetime] = None, creation_timestamp: Optional[datetime.datetime] = None)

   Bases: :py:obj:`whylogs.api.writer.writer.Writable`

   Dataset profile represents a collection of in-memory profiling stats for a dataset.

   :param schema: :class:`DatasetSchema`, optional
                  An object that represents the data column names and types
   :param dataset_timestamp: int, optional
                             A timestamp integer that best represents the date tied to the dataset generation.
                             i.e.: A January 1st 2019 Sales Dataset will have 1546300800000 as the timestamp in miliseconds (UTC).
                             If None is provided, it will take the current timestamp as default
   :param creation_timestamp: int, optional
                              The timestamp tied to the exact moment when the :class:`DatasetProfile` is created.
                              If None is provided, it will take the current timestamp as default

   .. py:method:: creation_timestamp() -> datetime.datetime
      :property:


   .. py:method:: dataset_timestamp() -> datetime.datetime
      :property:


   .. py:method:: is_active() -> bool
      :property:

      Returns True if the profile tracking code is currently running.


   .. py:method:: is_empty() -> bool
      :property:

      Returns True if the profile tracking code is currently running.


   .. py:method:: set_dataset_timestamp(dataset_timestamp: datetime.datetime) -> None


   .. py:method:: add_metric(col_name: str, metric: whylogs.core.metrics.Metric) -> None


   .. py:method:: track(obj: Any = None, *, pandas: Optional[whylogs.core.stubs.pd.DataFrame] = None, row: Optional[Mapping[str, Any]] = None) -> None


   .. py:method:: view() -> whylogs.core.view.DatasetProfileView


   .. py:method:: flush() -> None


   .. py:method:: get_default_path(path) -> str
      :staticmethod:


   .. py:method:: write(path: Optional[str] = None, **kwargs: Any) -> None


   .. py:method:: read(input_path: str) -> whylogs.core.view.DatasetProfileView
      :classmethod:



.. py:class:: TypeMapper

   Bases: :py:obj:`abc.ABC`

   Helper class that provides a standard way to create an ABC using
   inheritance.


.. py:class:: MetricConfig

   .. py:attribute:: hll_lg_k
      :annotation: :int = 12

      

   .. py:attribute:: kll_k
      :annotation: :int = 256

      

   .. py:attribute:: fi_lg_max_k
      :annotation: :int = 10

      

   .. py:attribute:: fi_disabled
      :annotation: :bool = False

      

   .. py:attribute:: track_unicode_ranges
      :annotation: :bool = False

      

   .. py:attribute:: large_kll_k
      :annotation: :bool = True

      

   .. py:attribute:: kll_k_large
      :annotation: :int = 1024

      

   .. py:attribute:: unicode_ranges
      :annotation: :Dict[str, Tuple[int, int]]

      

   .. py:attribute:: lower_case
      :annotation: :bool = True

      

   .. py:attribute:: normalize
      :annotation: :bool = True

      


.. py:class:: Resolver

   Bases: :py:obj:`abc.ABC`

   A resolver maps from a column name and a data type to trackers.

   Note that the key of the result dictionaries defines the namespaces of the metrics in the serialized form.

   .. py:method:: resolve(name: str, why_type: whylogs.core.datatypes.DataType, column_schema: ColumnSchema) -> Dict[str, whylogs.core.metrics.metrics.Metric]
      :abstractmethod:



.. py:class:: ColumnSchema

   Schema of a column.

   The main goal is to specify the data type.
   On top of that, users can configure their own tracker resolution logic (mapping a type to a list of tracker
   factories) and any additional trackers here.

   .. py:attribute:: dtype
      :annotation: :Any

      

   .. py:attribute:: cfg
      :annotation: :whylogs.core.metrics.metrics.MetricConfig

      

   .. py:attribute:: type_mapper
      :annotation: :whylogs.core.datatypes.TypeMapper

      

   .. py:attribute:: resolver
      :annotation: :whylogs.core.resolvers.Resolver

      

   .. py:method:: get_metrics(name: str) -> Dict[str, whylogs.core.metrics.metrics.Metric]



.. py:class:: DatasetSchema(types: Optional[Dict[str, Any]] = None, default_configs: Optional[whylogs.core.metrics.metrics.MetricConfig] = None, type_mapper: Optional[whylogs.core.datatypes.TypeMapper] = None, resolvers: Optional[whylogs.core.resolvers.Resolver] = None, cache_size: int = 1024, schema_based_automerge: bool = False)

   Defines the schema for tracking metrics in whylogs.

   In order to customize your tracking, you can extend this class to specify your own column schema
   or your own type resolution. Otherwise, you can just use the default DatasetSchema object.

   Schema objects are also used to group datasets together.

   .. attribute:: types

      required. a dictionay of column name to the Python type.

   .. attribute:: default_configs

      optional. Options to configure various behavior of whylogs.

   .. attribute:: type_mapper

      Optional. a mapper that transates the Python type to standardized whylogs :class:`DataType` object.

   .. attribute:: resolvers

      Optional. an object that defines how to map from a column name, a whylogs :class:`DataType` and a
      schema to metrics.

   .. rubric:: Examples

   >>> import pandas as pd
   >>> import numpy as np
   >>> from whylogs.core import DatasetSchema, DatasetProfile
   >>> from whylogs.core.resolvers import Resolver, StandardResolver
   >>>
   >>> class MyResolver(StandardResolver):
   ...    pass
   >>>
   >>> schema = DatasetSchema(
   ...    types={
   ...        "col1": str,
   ...        "col2": np.int32,
   ...        "col3": pd.CategoricalDtype(categories=('foo', 'bar'), ordered=True)
   ...    },
   ...    resolvers=MyResolver()
   ... )
   >>> prof = DatasetProfile(schema)
   >>> df = pd.DataFrame({"col1": ['foo'], "col2": np.array([1], dtype=np.int32), "col3": ['bar']})
   >>> prof.track(pandas=df)

   .. py:method:: copy() -> DatasetSchema

      Returns a new instance of the same underlying schema


   .. py:method:: resolve(*, pandas: Optional[whylogs.core.stubs.pd.DataFrame] = None, row: Optional[Mapping[str, Any]] = None) -> bool


   .. py:method:: get_col_names() -> tuple


   .. py:method:: get(name: str) -> Optional[ColumnSchema]



.. py:data:: WHYLOGS_MAGIC_HEADER
   :annotation: = WHY1

   

.. py:class:: ColumnProfileView(metrics: Dict[str, METRIC], success_count: int = 0, failure_count: int = 0)

   Bases: :py:obj:`object`

   .. py:method:: merge(other: ColumnProfileView) -> ColumnProfileView


   .. py:method:: serialize() -> bytes


   .. py:method:: deserialize(serialized_profile: bytes) -> ColumnProfileView
      :classmethod:


   .. py:method:: get_metric(m_name: str) -> Optional[METRIC]


   .. py:method:: to_protobuf() -> whylogs.core.proto.ColumnMessage


   .. py:method:: get_metric_component_paths() -> List[str]


   .. py:method:: get_metric_names() -> List[str]


   .. py:method:: to_summary_dict(*, column_metric: Optional[str] = None, cfg: Optional[whylogs.core.configs.SummaryConfig] = None) -> Dict[str, Any]


   .. py:method:: zero(msg: whylogs.core.proto.ColumnMessage) -> ColumnProfileView
      :classmethod:


   .. py:method:: from_protobuf(msg: whylogs.core.proto.ColumnMessage) -> ColumnProfileView
      :classmethod:


   .. py:method:: from_bytes(data: bytes) -> ColumnProfileView
      :classmethod:



.. py:class:: DatasetProfileView(*, columns: Dict[str, whylogs.core.view.column_profile_view.ColumnProfileView], dataset_timestamp: datetime.datetime, creation_timestamp: datetime.datetime)

   Bases: :py:obj:`whylogs.api.writer.writer.Writable`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: dataset_timestamp() -> datetime.datetime
      :property:


   .. py:method:: creation_timestamp() -> datetime.datetime
      :property:


   .. py:method:: merge(other: DatasetProfileView) -> DatasetProfileView


   .. py:method:: get_column(col_name: str) -> Optional[whylogs.core.view.column_profile_view.ColumnProfileView]


   .. py:method:: get_columns(col_names: Optional[List[str]] = None) -> Dict[str, whylogs.core.view.column_profile_view.ColumnProfileView]


   .. py:method:: get_default_path() -> str


   .. py:method:: write(path: Optional[str] = None, **kwargs: Any) -> None


   .. py:method:: read(path: str) -> DatasetProfileView
      :classmethod:


   .. py:method:: to_pandas(column_metric: Optional[str] = None, cfg: Optional[whylogs.core.configs.SummaryConfig] = None) -> whylogs.core.stubs.pd.DataFrame



